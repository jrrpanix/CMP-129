
----------------------------------------------------------------
1) Create a Java class which does the following:
   a) creates a JFrame of width = 200 , height = 200
   b) has the property where it Exits on close
   c) is at location x=200,y=200
   d) displays 

import javax.swing.*;

class SimpleFrame extends JFrame {

      public SimpleFrame() {
         initFrame();
         setVisible(true);
      }

      private void initFrame() {
        setSize(200,200);
	setDefaultCloseOperation(EXIT_ON_CLOSE);
	setLocation(200,200);
      }
}

----------------------------------------------------------------
2) What is the default layout manager for JFrame ?

   FlowLayout

----------------------------------------------------------------
3) What is the default layout manager for JPanel ?

   Does not have a layout manager

----------------------------------------------------------------
4) Write a Java GUI Application which does the following:
   
   a) Adds up Two Numbers and displays the result 
   b) The user interface will look as follows:

   X:______________  Y:_________ [Calc] 
     Result____________

   where the layout will be
   JLabel("X:") , JTextField <x_input> , JLabel("Y:") , JTextField<y_input> , JButton("Calc")
      JLabel("Result") , JLabel<result_string>


   when the calc button is pressed it will take the text in the x and y input fields
   convert them to a number , add them up and then place the result in a JLabel

   To do this you will need to add an ActionListener to the JButton you create 


import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class AddGui extends JFrame {

       private JTextField x1Field;
       private JTextField x2Field;
       private JTextField result;
       
       public AddGui() {
         initFrame();
  	 initPanel();
	 pack();
	 setVisible(true);
       }
	
	private void initFrame() {
	  setSize(200,400);
	  setLocation(200,200);
	  setDefaultCloseOperation(EXIT_ON_CLOSE);
	}
				
      private void initPanel() {
	JPanel p = new JPanel();
        p.add(new JLabel("x1"));
        p.add(x1Field = new JTextField(10));
        p.add(new JLabel("x2"));
        p.add(x2Field = new JTextField(10));
        JButton b = new JButton("Calc");
        b.addActionListener( new ButtonL());
        p.add(b);
        p.add(result = new JTextField(10));
        result.setEditable(false);
        add(p);
     }

     private void doCalc() {
        double x1 = Double.parseDouble(x1Field.getText());
	double x2 = Double.parseDouble(x2Field.getText());
	result.setText( Double.toString(x1+x2)); 
     }
																	   
     private class ButtonL implements ActionListener {

	  public void actionPerformed( ActionEvent e ) {
	    doCalc();
	  }
    }
																								   
  public static void main( String [] args ) {
    new AddGui();
  }
}

----------------------------------------------------------------
4b) Write the same GUI Application as in (4) but without the CalcButton
   instead use KeyListener to update the result
   
   a) Adds up Two Numbers and displays the result 
   b) The user interface will look as follows:

   X:______________  Y:_________ Result:

   where the layout will be
   JLabel("X:") , JTextField <x_input> , JLabel("Y:") , JTextField<y_input> ,
      JLabel("Result") , JLabel<result_string>


   when a number is enered it will update the result
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class AddGui extends JFrame {

       private JTextField x1Field;
       private JTextField x2Field;
       private JTextField result;
       
       public AddGui() {
         initFrame();
  	 initPanel();
	 pack();
	 setVisible(true);
       }
	
	private void initFrame() {
	  setSize(200,400);
	  setLocation(200,200);
	  setDefaultCloseOperation(EXIT_ON_CLOSE);
	}
				
      private void initPanel() {
	JPanel p = new JPanel();
        p.add(new JLabel("x1"));
        p.add(x1Field = new JTextField(10));
	x1.Field.addKeyListener( new TextL());
        p.add(new JLabel("x2"));
        p.add(x2Field = new JTextField(10));
	x2.Field.addKeyListener( new TextL());
        p.add(result = new JTextField(10));
        result.setEditable(false);
        add(p);
     }

     private void getDouble( String text ) {
        try{
	   return Double.parseDouble(text);
	}
	catch( Exception e ) {
	   return 0;
	}
     }

     private void doCalc() {
        double x1 = getDouble(x1Field.getText());
	double x2 = getDouble(x2Field.getText());
	result.setText( Double.toString(x1+x2)); 
     }
																	   
     private class TextL implements KeyListener {

        public void keyPressed( KeyEvent e ) {
	   // do nothing wait for keyReleased Event
	}

	public void keyTyped( KeyEvent e ) {
	   // do nothing wait for keyReleased Event
	}

	public void keyReleased( KeyEvent e ) {
	   doCalc();
	}

    }
																								   
  public static void main( String [] args ) {
    new AddGui();
  }
}


-----------------------------------------------------------------------------------------------

5) Write a keypad application that has a buttons the digits 0-9 plus the symbols '*' and '#'
   put this into a GridLayout with 4 rows and 3 Colums
   and when a key is pressed it updates a JTextField with the button pressed

   ----------------------
   |  |_______________| <- JTextField
   ----------------------
   |   1  |   2  |  3 |
   |   4  |   5  |  6 |  <- when a button is pressed the text is appened to
   |   7  |   8  |  9 |     the text in JTextField above... 
   |   *  |   0  |  # |
   ----------------------



import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class KeyPad extends JFrame {

       private JTextField text_;
       private JButton [] buttons_;
       
       public KeyPad() {
       	      initFrame();
	      initPanel();
	      pack();
	      setVisible(true);
       }
				
				
       private void initFrame() {
          setLocation(200,200);
	  setDefaultCloseOperation(EXIT_ON_CLOSE);
      }
						
      private void initPanel() {
         JPanel p = new JPanel();
	 p.setLayout(new BorderLayout());

	 text_ = new JTextField(20);
	 p.add(text_,BorderLayout.NORTH);

	 String [] keys = { 
	 "1","2","3",
	 "4","5","6",
	 "7","8","9",
	 "*","0","#" };

        JPanel buttonP = new JPanel();
	buttonP.setLayout( new GridLayout(4,3));
	buttons_ = new JButton[keys.length];
	ButtonL listener = new ButtonL();
	for( int i = 0; i < buttons_.length;i++) {
	    buttons_[i] = new JButton(keys[i]);
	    buttons_[i].addActionListener(listener);
	    buttonP.add(buttons_[i]);
        }
	p.add(buttonP,BorderLayout.CENTER);
	 add(p);
     }

     private void doEvent( ActionEvent e) {
       String b = e.getActionCommand();
       String textData = text_.getText();
       textData += b;
       text_.setText(textData);
     }

     private class ButtonL implements ActionListener {

       public void actionPerformed(ActionEvent e) {
           doEvent(e);
       }
     }

     public static void main(String [] args ) {
        new KeyPad();
     }
		
}



