-------------------------------------------------------------------------------------------------
Chapter 8 questions from "Java From Control Structures Through Objects" 5th Edition, Tony Gaddis
-------------------------------------------------------------------------------------------------

(1) The type of method that cannnot access any non-static member variables in its own class.

    Answer: c  : static methods can't access non-static members 

    Example

    public class A {

       public int x_;  // <- this an "instance member" (aka non-static)
       public static int Z; // <- this is a static member

       public static void aStaticFunction() {
          int a = x_; <- THIS IS ILLEGAL. NOT ALLOWED!!!  x_ can't be accessed here because its a static method!!!
	  Z++; <- OK! static functions can access static member variables!!!
       }
    }

(2) When an object is passed as an argument to a method, this is actually passed.

    Answer: c: a reference to the object 

    all objects are passed as references in Java, primitives are passed by copy

(3) If you write this method for a class, Java will automatically call it any time you concatenate
    an object with the class of a string

    Answer a: toString

    Example

    public class A {

       public String toString() {
         return new String(":A");
       }

       public static void main( String [] args ) {
         A a = new A();
	 System.out.println( "We are printing class " + a );  <- Example of concatenation
                                                              <- when "a" is concatenated with a String
							      <- it calls the method toString() 
       }
    }
    The output of this call will be   
    
    We are printing class :A

(4) Making an instance of one class field in another class is called ?

    Answer: c : aggregation

    public class Book {
       public String title;
       public String author;
    }
    
    public class Instructor {
      public String lastName;
      public String firstName;
      public String department;
    }

    public class Course {
      public Instructor instructor;    <- Example of Aggregation Instructor instance is in class Cource
      public Book       textBook;      <- Example of Aggregatoin Book instance is in class Course
      public String     courseSection;
      public String     courseTitle;
    }

(5) The name of a reference variable that is always avaialble to an instance method
    and refers to the object that is calling the method

    Answer : b : this

    public class A {
      public int a;

      public A( int a ) {
        this.a_ = a;  <- "this" is always available in instance methods
      } 
    }

(6) This enum method returns the position of an enum constant in a declaration
    Answer: c: ordinal

    enum Seasons { SPRING, WINTER, SUMMER , FALL };

    Seasons aSeason = Seasons.Winter;
    aSeason.ordinal() == 1;

(7) Assuming the following declaration exists:
    enum Seasons { SPRING, WINTER, SUMMER , FALL };
    what is the fully qualified name of the Fall constant ?
    
    Answer: d : Seasons.FALL    

(8) You cannot use the fully qualified of an enum constant for this.

    Answer: b : a case expression

    Example:

    enum Seasons { SPRING, WINTER, SUMMER , FALL };	

    public static double GetTemp( Seasons aSeason ) {

        switch( aSeason ) {
	  case Seasons.SPRING: return 55;  <- Not Allowed! case CAN'T have full qualfied name Seasons.SPRING!!!!
	  case WINTER: return 20;          <- OK, in the case statement WINTER !
	  case SUMMER: return 85;          <- OK, in the case statement SUMMER ! 
	  case FALL:   return 45;          <- OK, in the case statement FALL !
	  default:
	  break;
	}
	return 0;
    } 
    
(9) The Java Virtual Machine periodically performs this process, which automatically removes unreferenced
    objects from memory

    Answer: c: garbage collection

(10) If a class this method is called automatically before an instance of the class is destoryed by the JVM

     Answer: a: finalize

(11) CRC stands for :

     Answer: b : Class Responsiblities Collaborations

(12) True or False : A static method may refer to non-satic members variables of the same class,
     but only after an instance of the class has been defined.

     Answer: False  

     (Note the wording of the question lends to ambiguity) 

     The instance variables in a static method may refer to non-static members but not the method itself
     (its not entirely clear from the question)

     For example :

     class A {
        public int x ;
     
        public satic void HelloA() {
	  A anInstance = new A();
	  System.out.println( anInstance.x ); // OK! 
	  System.out.println( x ) ; // NOT OK!!! an instance of A is required to refer to x 
	}
     }

(13) True or False : All static member variables are initalized to -1 by defult

     Answer: False : they are initalized to 0 by default

     class A {
       public static int X;  <- this will be initalized to zero
     }

     


(14) True or False : When an object is passed as an argument to a method, the
     method can acess the argument

     Answer: True : why else would you pass it as an argument

     public void someMethod( String aString ) {
        long hash = aString.hashCode(); <- Perfectly OK! Object accessing a method 
     }


(15) True or False : A method cannot return a reference to an object

     Anwser: False : of course it can


     public String yourName() {
        return new String("John"); <- Perfectly OK! Returning a reference to an object
     }

(16) True or False : You can declare an enumerated type inside a method.
     
     Answer False : enum types can't be local


     Example output from javac (java compilier showing that local enum is not allowed)

     public class A {

     public static void DemoLocalEnumFail() {
	enum LocalE { X , Y , Z };   <----- NOT ALLOWED!!!!!
	LocalE e = LocalE.X;
	System.out.println(e);
    }
    }

    javac A.java 
	
    A.java:4: error: enum types must not be local
	enum LocalE { X , Y , Z };
	^
	1 error



(17) True or False : Enumerated types are actually special types of classes.

     Answer True : they are derived from object and come with a number of build in methods


(18) True or False : Enum constants have a toString() method.

     Answer True : Seasons.FALL.toString() <- toString is build in! 

     




     
