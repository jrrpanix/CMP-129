--------------------------------------------------------------
// Course      : CMP-129
// Title       : Midterm Review Questions, Chapter 10
// Instructor  : JReynolds
--------------------------------------------------------------
--------------------------------------------------------------
Inheritance
(Covers Gaddis Ch 10, pre-requsites Gaddis Ch6,Ch8)
--------------------------------------------------------------

Concepts:
* inheritance
* superclass
* subclass
* public, private, protected
* chains of inheritance
* polymorphism
* abstract classes, abstract methods
* interfaces
--------------------------------------------------------------

(1)  What is inheritance ?


(1a) What is the Java keyword which allowd one class to inherit another?


(2)  Given the following code which is the SuperClass and which is
     the SubClass ?

     public class Rectangle extends Shape {
     }


(3) For the following class definitions determine which statements
    in main are ok and which are not.

    public class Person {

       public String firstName;
       public String lastName;

       public Person( String fname , String lname ) {
          this.firstName=fname;
	  this.lastName=lname;
       }
    }


    public class Teacher extends Person {
         public String department;
	 public String school;
    

       public Teacher( String fname, String lname, String dept, String school ) {
           super(fname,lname);
	   this.department=dept;
	   this.school=school;
       }


       public static void main( String [] args ) {
           Person p0 = new Teacher( "Mary" , "Poppins" , "Physics" , "CalTech");
	   Person p1 = new Person( "Lou" , "Pizzaman" );
	   Teacher t0 = p1;
	   Teacher t1 = p0;
	   Teacher t2 = new Person( "Alice" , "Wonderland" );
	   Teacher t3 = new Teacher( "Albert", "Einstein", "Physics" , "Princeton");
	   Person p3 = t3;
	   System.out.println( "LastName=" + p3.lastName + " Department=" + p3.Department );
	   System.out.println( "LastName=" + t3.lastName + " Department=" + t3.Department );
       }

    }

(4) For the method called "result" in class Level1 determine what if 
    anything is wrong with the code.

    public class Base {

       private    int b0_;
       protected  int b1_;
       public     int b2_;

       public Base( int b0 , int b1 , int b2 ) {
         b0_=b0;
	 b1_=b1;
	 b2_=b2;
       }

    }

    public class Level1 extends Base {

       private int l1_;
       public  int l2_;

       public Level1( int l1 , int l2 , int b0 , int b1 , int b2 ) {
         super(b0,b1,b2);
	 l1_=l1;
	 l2_=l2;
       }

       public double result( double m1 , double m2 ) {
          double r0 = super.b0_ ;
	  double r1 = super.b1_*m1 + l1*m1;
	  double r2 = super.b2_*m2 + l2*m2;
	  return r0 + r1 + r2;
       }  


    }

(5) For the code below complete the following contructors for Square
     a) A square that's constructed with (side,xpos,ypos)
     b) A square that's constructed with (size,xpos,ypos,color)


    public class Shape {
       protected int   xPos_;
       protected int   yPos_;
       protected Color color_;


       public Shape( int x , int y, Color c ) {
         xPos_=x;
	 yPos_=y;
	 color_=c;
       }

       public Shape( int x , int y ) {
         xPos_=x;
	 yPos_=y;
	 color_=Color.Purple;
       }

    }


    public class Square extends Shape {
       private double side_;
       
    }


(6) What's the output in main for the following class hierachry ?

    public abstract class Design {
    
        public abstract String makePattern( String s , String pattern );
    }
    
    public class InFront extends Design {
        
        public String makePattern( String s, String pattern ) {
    	   return new String( pattern + s );
        }
    }
    
    public class InBack extends Design {
    
        public String makePattern( String s, String pattern ) {
    	   return new String( s + pattern );
        }
    }
    
    public class TwoBack extends InBack {
        
        public String makePattern( String s, String pattern ) {
    	   return super.makePattern(s,pattern) + pattern;
        }
        
    }

    public class DesignTest {
        
        public static void main( String [] args ) {
    	
    	Design [] D = new Design[3];
    	int i =0;
    	D[i++] = new InBack();
    	D[i++] = new TwoBack();
    	D[i++] = new InFront();
    	
    	String s = new String("X");
    	String [] P = {"A","B","C"};
    	for( i = 0; i < 3 ; i++ ) {
    	    s = D[i].makePattern(s,P[i]);
	}
	System.out.println(s);
    }
  }

(7) What's wrong with the following code or is it correct?

    public abstract class Shape {

       public Color color;

       public Shape( Color c ) {
         this.color = c;
       }

       public abstract void rotate();
       public abstract double area();

       public static void main( String [] args ) {
          Shape s = new Shape(Color.Red );
       }

    }
    

(8) What's wrong with implementation of Cricle or is it correct?

    public abstract class Shape {

       public abstract void rotate();
       public abstract double area();

    }

    public class Circle extends Shape {

       public radius;

       public double area() {
         return Math.PI * radius * radius;
       }

    }

(9) What's wrong with the following interface ?

    public interface Scale {
       public double scaleFactor;

       public void increase( double rate ) {
          scaleFactor *= (1.0 + rate );
       }

       public void decrease();

    } 


(10) Implement the interface Arithmetic for the class Number,

   
     public interface Arithmetic {

         public void add( int x );
         public void subtract( int x );

     }


     public class Number {

         public int X;

	 public Number( int X ) {
	    this.X = X;
	 }

     }



