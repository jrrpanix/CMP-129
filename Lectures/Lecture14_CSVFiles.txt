/ Course       : CMP-129
// Title       : Parsing CSV (Comma Separated Values) 
// Instructor  : JReynolds

A typical file format is .csv , which stands for Comma Separated Values.
Frequently files will come in this format and its so common that applications 
like Excel and common websites will use this format.

The typical formamt is such as follows:


Date,Open,High,Low,Close,Volume,Adj Close
2015-03-20,566.71,567.10,564.48,564.95,2200500,564.95
2015-03-19,564.52,566.96,562.12,563.67,1227000,563.67
2015-03-18,557.73,566.51,553.50,566.16,1766200,566.16
2015-03-17,558.29,560.64,554.41,557.61,1444600,557.61
2015-03-16,556.93,563.75,551.32,561.64,1842800,561.64


This is an example of price history file down loaded from google:
The first line is the header row and the lines that follow are the data.


The file is read row by row and each row of data is 
captured in a String Variable:

Here is some code to read this file in :
     
     import java.io.*;
     import java.util.*;

     class ReadCSVData {

         static public ArrayList<String> readFile( String fileName ) {
	     ArrayList<String> data;
	     try {
                  File file = new File( fileName );
		  Scanner scan = new Scanner(file);
		  while( scan.hasNextLine() ) {
		     line = scan.nextLine();
		     data.add(line)
		  }
		  scan.close();
	     }
	     catch( IOException ex ) {
	     }
	     return data;
	 }
     }


Code to parse a line of data, in this Example we have 7 Fields :

     Date
     Open
     High
     Low
     Close
     Volume
     Adj Close

We use the String method "split" which creates a String Array from
breaking a line into parts based on the separator, in this case the
separator is a comma ","
  
    So if a String variable "line" is this 

    2015-03-20,566.71,567.10,564.48,564.95,2200500,564.95

	String line = "2015-03-20,566.71,567.10,564.48,564.95,2200500,564.95"
    
    then line.split(",") will produce a String Array with 7 fields :

        String [] fields = line.split(",");

	fields[0] equals "2015-03-20"
	fields[1] equals "566.71"
	fields[2] equals "567.10"
	fields[3] equals "564.48"
	fields[4] equals "564.95"
	fields[5] equals "2200500"
	fields[6] equals "564.95"
	
we can convert the floating point numbers to "Double" using the
static method Double.parseDouble()

       double price = Double.parseDouble(fields[1]);

and for the long variable 

       long  volume = Long.praseLone(fields[5]);


we can make a class to capture each record and parse a line of data:

   public class YahooRecord {

     public String date;
     public double open;
     public double high;
     public double low;
     public double close;
     public double volume;
     public double adjClose;


     public void parse( String line ) {

       String [] fields = line.split(",");
       if ( fields.length != 7 ) {
          // error - just return for now 
	  return;
       }
       // Sample line of data
       // 2015-03-20,566.71,567.10,564.48,564.95,2200500,564.95
       //
       int j = 0;
       date = fields[j++];
       open = Double.parseDouble(fields[j++]);
       high = Double.parseDouble(fields[j++]);
       low  = Double.parseDouble(fields[j++]);
       close = Double.parseDouble(fields[j++]);
       volume = Long.parseLong(fields[j++]);
       adjClose = Double.parseDouble(fields[j++]);
     }
   }

We can create a class to hold all the YahooRecords for a Stock History

   public class YahooHistory {

       public ArrayList<YahooRecord> prices;

       void readFile( String fileName ) {
	     try {
                  File file = new File( fileName );
		  Scanner scan = new Scanner(file);
		  while( scan.hasNextLine() ) {
		     line = scan.nextLine();
		     YahooRecord rec = new YahooRecord();
		     rec.parse(line);
		     prices.add(rec);
		  }
		  scan.close();
	     }
	     catch( IOException ex ) {
	     }
       }
   }








	



