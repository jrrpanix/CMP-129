---------------------------------------------------------
class      : CMP-129
lecture    : Creating Exceptions
instructor : JReynolds
text source: Based on Gaddis Chapter 11
---------------------------------------------------------


In the previous lecture we went over various types of 
exceptions that can be thrown in Java.  

To summarize:

(*) All Exception classes in Java inherit from class "Exception"
(*) class "Exception" inherits from "Throwable"
(*) class "Error" inherits from "Throwable" but is for serious conditions
(*) we handle exceptions by using try/catch block
(*) because exceptions are polymorphic we can choose to catch
    the superclass "Exception" , the exact exception being throw
    or some super class of the exception being throw.
(*) exceptions go down the calling stack until they find a place
    where they are explicitly handled or if unhandled the
    JVM will handle the exception, print out the calling stack
    and exit
(*) if we choose not to handle an exception in a method that can
    throw an exception we must by a "throws" at the end of 
    the method signature.

-------------------------
Some types of exceptions 
--------------------------

(*) Example of java.lang.NumberFormatException

	   String s = "abc";
	   Integer i = Ingeger.parseInt(s);

  this will throw, java.lang.NumberFormatException

   

(*)Example of java.lang.ArrayIndexOutOfBoundsException: 3

         int [] X = {1,2,3}
          int y = X[3];

  this will throw , java.lang.ArrayIndexOutOfBoundsException: 3

(*) Example of java.io.FileNotFoundException 

      File f = new File( fname );
      Scanner scan = new Scanner(f);  <-- this can throw java.io.FileNotFoundException

-------------------------
Handeling an exception
--------------------------
    import java.io.File;
    import java.io.FileNotFoundException;
    import java.util.Scanner;
    import java.util.ArrayList;

    static ArrayList<String> ReadFile( String fileName ) {

       ArrayList<String> contents = new ArrayList<String>();
       try {
           File file = new File(fileName);
	   Scanner scanner = new Scanner( file );
	   while( scanner.hasNext() ) {
	      contents.add(scanner.next());
	   }	   
       }
       catch( java.io.FileNotFoundException e ) {
          System.out.println( e );
       }
  }


(*) on the catch block we could also could have done this ...

       catch( Exception e ) {
          System.out.println( e );
       }

(*) or we could have not handled the exception and put a throws 
    on the signature of the method :

    static ArrayList<String> ReadFile( String fileName ) throws java.io.FileNotFoundException {
       ArrayList<String> contents = new ArrayList<String>();
       File file = new File(fileName);
       Scanner scanner = new Scanner( file );
       while( scanner.hasNext() ) {
          contents.add(scanner.next());
       }	   
    }


--------------------------------
creating an exception class
--------------------------------

To create an exception class we inherit from superclass "Exception" or some class
that is extended from Exception:

Example:

(*) Suppose we are going to read data from a file that contains student information:
    each line of the file should contain :

    last name
    first name
    student id
    grade point average
    expected graduation year

(*)  if the file has missing or bad data we throw an exception 


    public class StudentInfo {
       public String lastName_;
       public String firstName_;
       public long   id_;
       public double gpa_;
       public int    graduationYear_;


       public StudentInfo() {
       	 id_;
	 gpa_;
         graduationYear_;

       }

       public void setFromInput( String input ) {
          String [] fields = input.split(",");
          if ( fields.length != 5) {
        	   // error
          }
          lastName_ = fields[0];
          firstName_= fields[1];
    			   
          id_ = Long.parseLong(fields[2]); // this could throw exeption
          gpa_ = Double.parseDouble(fields[3]); // this could throw exception
          graduationYear_ = Integer.parseInt(fields[4]); // this could throw exception
      }
    }

(*) We have a number of places where reading the input can go wrong:

    (1) file might not be found
    (2) the input line may not contain 5 fields
    (3) the numeric fileds may be in a bad format
    (4) the numeric fileds may be in a good numeric format but
        not make sense, ex. graduationYear_ = -1000


(*) So now we have a bunch of choices to make on how to deal with errors and communicate them
    back to the routine reading in the file ...

   public class StudentInfoException extends Exception {

      public StudentInfoException( String msg ) {
         super(msg)
      }

      public StudentInfoException( String msg , double data ) {
        String err = new String( msg + " number = " + data );
	super(err); 
      }
   }
    
(*) 

   public void setFromInput( String input ) throws StudentInfoException {
          String [] fields = input.split(",");
          if ( fields.length != 5) {
	     throw new StudentInfoException( "Expecting 5 intput items got " + fields.length );
          }
	  int i = 0;
          lastName_ = fields[i++];
          firstName_= fields[i++];
             			   
	  try {
            id_ = Long.parseLong(fields[i++]); // this could throw exeption
            gpa_ = Double.parseDouble(fields[i++]); // this could throw exception
            graduationYear_ = Integer.parseInt(fields[i++]); // this could throw exception
	  catch ( java.lang.NumberFormatException e ) {
	     long field = 0;
	     if ( i ==2 ) field = id;
	     else if ( i == 3) field = (long)gpa_;
	     else if ( i == 4) field = graduationYear_;
	     throw new StudentInfoException(e,field);sy
          }
      }
    

(*) now we can add a method to read in from a file

   import java.io.File;
   import java.util.Scanner;
   import java.util.ArrayList;

    public static ArrayList<StudentInfo> read( String file) {
       ArrayList<StudentInfo> students = new ArrayList<StudentInfo>();
       try{
           File f = new File(file);
    	   Scanner scan = new Scanner(f);
    	   while( scan.hasNextLine()) {
    	       String line = scan.nextLine();
    	       StudentInfo student = new StudentInfo();
    	       try {
	         student.setFromInput(line);
	         students.add(student);
    	       }
    	       catch (Exception e) {
	          System.out.println(e);    
	       }
    	   }
    	   scan.close();
    	}
    	catch( java.io.FileNotFoundException e) {
           System.out.println(e);    
    	}
     return students;
    }
