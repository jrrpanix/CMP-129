------------------------------------------------------
Lecture 06
Classes in Java continued

In this lecture we are going to continue our introduction to Classes in Java with a review 
of what was covered last time and introduce a number of new concepts.  The lecture follows 
"Gaddis Chapter 8, A second look at Classes and Objects".

------------------------------------------------------

As a review last time we covered the following topics:

(*) static class members
(*) instance members 
(*) the difference between "private" and "public" for class members
(*) methods inherited from "Object"
(*) overriding some of "Ojects" methods specifically:
    toString()
    hashCode()
    equals()
    clone()
    finalize() 
(*) constructors ( Class Specific, Copy , Default )
(*) accessor methods (aka get Methods)
(*) passing objects as parameters
(*) returning objects from methods

To review :

static members/variables of a class don't require an instance of the class to be accessed.  
its a way to share data across a class.  a static variable is only created once and has a 
single memory location.  When created Java initializes the value of a static member to 0 for 
primitive types( int,long,float,double) unless the user specifies a particual value.

instance variables come into scope when a class is created via the "new" operator. each time "new" 
is called it creates a new "instance" .of the class.  every time "new" is called it creates memory 
for the instance being created.  

   public class A {
     public static int aStaticMember;
     public int anInstanceMember;

     public A( int x ) {
     anInstanceMember = x;
   }

   public void setInstanceMember( int x ) {
      anInstanceMember = x;
   }

   public static void modifyStaticMember( int x ) {
     aStaticMember = x;
   }
  }

   A a0 = new A(11);
   A a1 = new A(1731);
   A.modifyStaticMember(333); // there is only 1 copy of the static variable 
                                  so everyone sees the modification
   a1.setInstanceMember(2000); // this will only modify a1 instanceVariable

   a0.anInstanceVariable == 11;
   a1.anInstanceVariable == 2000; // there are now two instances of A (a0 and a1)
   A.aStaticMember == 333; // there's only 1 aStaticMember and its accessed via the class name "A"


static functions - can't access instance variables because there's no instance of a class. 
They don't not require and instance of the class to call them.

instance methods - can access static variables becasue that's a way of sharing data across 
instances of a class. They can only be called if an instance of a class is created!


   public class A { 
      public static int aStaticMember;
      public int anInstanceMember;
                    
    public A( int x ) {
        anInstanceMember = x;
    }
                    
   public void setInstanceMember( int x ) { // this is an "instance" method
       anInstanceMember = x;
       aStaticMember++; // <- it's ok to access a static member in an instance method 
    }
               
    public static void modifyStaticMember( int x ) { // this is a static function
      aStaticMember = x; 
      //anInstanceMember++ ; <- this is NOT ALLOWED because there is not instance of "A" to hold this variable!!!
   }

  }

  A.setInstanceMember(21);  <- this is NOT Allowed because it can only be called if an "instance" of A is created!  
  A.setStaticMember(121); // ok because its a static member function! 
  A a0 = new A(8765); 
  a0.setInstanceMember(8722); // ok because instance "a0" is instance so it can call an instance method

overriding toString() - every class is derived from Java "Object" which comes with built in methods 
                        including "toString()" which converts the object to some string readable representation 
                        of the class. to override this class simply redefine it in your class so for example:

         
  public class Circle {
    private double radius_;
           
    public Circle( double r ) {
       radius_=r;
    }
         
    // override the Object toString()
    public String toString() {
     return new String("Circle:" + radius_ );
    } 
  }        

copying a Java Class the Copy constructor and clone() method - to copy a Java class one has to implement 
either a copy constructor or the clone method or both.  Assigning one variable of a class to another only 
makes the reference the same location in memory.   To have distinct instances one has to copy the original.


  public class Circle {
    private double radius_; 
      
    public Cirlce( double r ) {
       radius_=r;
    }
      
    // The Copy Constructor
    public Circle( Circle aCircle ) {
          radius_=aCircle.radius_;    // or alternatively this.radius_= aCircle.radius_;
     } 
      
     public void setRadius( double x ) {
        radius_=x;
     }
     
     public double getRadius() {
       return radius_;
     }
     
     public double calcArea() {
      return Math.PI * radius_ *radius_;
     }
     
     // Overriding Object clone() method
     public Object clone() {
       return new Circle(this);
     }
   }
      
   Circle c0 = new Cirlce(5);
   Circle  c1 = c0;   // this is  NOT a COPY c0 and c1 reference the same object!
   c1.setRadius(11);
   c0.getRadius() == 11 ; // c0's radius is now 11 because c1 is a reference to it
   Circle c2 = new Circle(c1); // this is  A COPY, c2 and c0 refer to distinct memory locations !
   c2.setRadius(19);
   c1.getRadius() == 11;
   c2.getRadius() == 19;
     
            
a second look at overriding equals() - here will will examine overriding the equals method in stages, 
by first having a class with no equals operator, then we will override equals with the signature of 
the class as a parameter and finally we will show overriding equals(Object).  
we will be working off the following example below:

let's start with this simple class of Circle again:

  public class Circle {
    private double radius_;

   public Circle( double x ) {
      radius_ = x;
   }

   public Circle( Circle aCirlce ) {
     radius_ = aCircle_.radius_;
   }
 }

now consider the following code sequence:

   Circle c0 = new Circle( 11 );
  Circle c1 = new Circle( c0 );

if we call the method equals, it will be calling the default one inherited from Object which has signature 

     public boolean equals( Object x )

c0 and c1 are clearly equal but what does the call the the default equals method inherited from Object yield?

    boolean result = c0.equals(c1) ; // calling the default public boolean equals( Object ) will return false !

result will be false because we have not specified what determines if they are equal, so the default equals method

    public boolean equals(Object) will return false!

now lets create and equals method which takes Circle as an argument

   class Circle {
     private double radius_;

    public Circle( double x ) {
      radius_ = x;
     }

    public Circle( Circle aCircle ) {
        radius_ = aCircle.radius_;
    }

    public void setRadius( double x ) {
         radius_ = x;
    }

    // We are defining our own equals method,
    // it takes Circle as an argument not Object!

    public boolean equals( Circle x ) {
        return radius_ == x.radius_;
    }
   }

now consider the following code sequence :

  Circle c0 = new Circle( 5.5 );
  Circle c1 = new Cirlce( c0 );
   boolean result = c0.equals(c1); // this will return true ! 
                                   // it calls public boolean equals( Circle ) !


but suppose we assign c0 and c1 to type Object ?

  Object o1 = c1;
  Object o2 = c2;
  o1.equals(o2) ; // this will return false

this will call equals(Object) and not equals(Circle)!!!

to make it also work for equals(Object) we need to override this in class Cricle!

   class Circle {

      boolean equals( Object x ) {
        if (x.getClass() != Cirlce.class ) return false;
        Circle c = (Circle)x; // if Object x is of class Circle we can Cast it to Circle!
        return radius_ == c.radius_;
      }
   }
