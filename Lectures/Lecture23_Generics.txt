
Generics allow the same code to be used on different data types
instead of writing separate code for each data type.


-------------------------------------------------------------------
Easy Example:
-------------------------------------------------------------------

Supose we have 3 Different Type  of Arrays 

       Integer [] x = {1,2,3};
       Double []  y = {3.3,1.1,11};
       Character [] z = {'a','b','c'};

and we wanted to print out their contents we could make up
three mehods like this 

      public static void print( Inteter [] A ) {

        for( Integer x : A ) {
	   System.out.printf("%s",x);
	}
    } 

    public static void print( Double [] A ) {

        for( Double x : A ) {
	   System.out.printf("%s",x);
	}
    } 

    public static void print( Character [] A ) {

        for( Character x : A ) {
	   System.out.printf("%s",x);
	}
    } 

or we could use a "Generic" holder for the Object like this

   public static < E > void print( E [] A ) {
        for( E x : A ) {
	   System.out.printf("%s",x);
	}
   }


   public static void main( String [] args ) {

       Integer [] a = {1,2,3};
       Double [] b = {1.1,2.2);

       print(a);
       print(b);

   }

-------------------------------------------------------------------
Example of a Generic class
-------------------------------------------------------------------
import java.util.*;

public class Stack<T> {
       private ArrayList<T> data;

       public Stack() {
          data = new ArrayList<T>();
       }

       public void push( T t ) {
          data.add(t);
       }

       T pop() {
          int i = data.size();
	  return data.remove(i-1);
       }

       boolean isEmpty() {
          return data.isEmpty();
       }


}


