/ Course      : CMP-129
// Title       : Going over Java enum
// Instructor  : JReynolds


/*
  Java provides an enum class type which provides for many build in conviences 
  
  the methods are alredy implemented properly:
  
  String toString()
  boolean equals( Object )
  in addition enum types have the following special methods:
  
  int ordinal() - gives the position of where a specific enum types was declared
  int compareTo( <Your EnumClass> ) - gives the ordinal difference between 
  String name() - gives the name of the Enum
  and these special static functions:
  static <your EnumClass> valueOf( String ) - convert String to Enum Name
  static <your EnumClass>[] values() - gives an Array of All Enum Types
*/


class EnumTest {

    public static void TwoMonthsHeader() {
    System.out.format( "%9s %9s %11s %14s %14s %14s\n", "MonthA" , "MonthB" , "A==B" , "A.equals(B)" , "A.compareTo(B)" ,"B.compareTo(A)");
    }
    
    public static void TwoMonths( Months monthA , Months monthB ) {
    // demonstrate the ways to compare to enums
    // == operator
    // equals() method
    // compareTo() method
    
    boolean equalTest = monthA == monthB;
    boolean equalsTest = monthA.equals(monthB);
    String nameA = monthA.name();
    String nameB = monthB.name();
    int compareAB = monthA.compareTo(monthB);
    int compareBA = monthB.compareTo(monthA);

    System.out.format( "%9s %9s %11b %14b %14d %14d\n", nameA , nameB , equalTest , equalsTest , compareAB , compareBA);
    }


    public static int DaysInMonthNonLeapYear( Months m ) {
    // Example of using a Switch Statement
    switch( m ) {
    case Jan :
      return 31;
    case Feb:
      return 28;
    case Mar:
     return 31;
    case Apr:
      return 30;
    case May:
     return 31;
    case Jun:
     return 30;
    case Jul:
     return 31;
    case Aug:
     return 31;
    case Sep:
     return 30;
    case Oct:
     return 31;
    case Nov:
     return 30;
    case Dec:
      return 31;
    }
    return -1;
    }

    public static void printStatusHeader() {
    System.out.format( "%10s %10s %9s %4s\n","toString()","name()","ordinal()","Days");
    }
    public static void printStatus( Months m ) {
    // Demonstrate the the enum built in methods
    // toString
    // name
    // ordinal
    String eString = m.toString();
    String name = m.name();
    int ordinalValue = m.ordinal();
    int daysInMonth = DaysInMonthNonLeapYear(m);
    System.out.format( "%10s %10s %9d %4d\n",eString,name,ordinalValue,daysInMonth);
    
    }

    public static void main( String [] args ) {

    
    // Get all of the enum types using "values"
    // Demonstrate built in methods
    // toString
    // name
    // ordinal
    Months [] monthsArray = Months.values(); 
    printStatusHeader();
    for( Months m : monthsArray ) 
        printStatus(m);
	System.out.println("");

	// Compare Two Enums demonstrate ways to compare enums
	// == operator
	// equals()
	// compareTo
       
       System.out.println( "\nDemonstrate ways to compare to enums");
       TwoMonthsHeader();
       TwoMonths( Months.Jan , Months.Feb );
       TwoMonths( Months.Jul , Months.Jul );
       TwoMonths( Months.Oct , Months.Apr );
       TwoMonths( Months.Mar , Months.Nov );
       TwoMonths( Months.May , Months.Aug );
       System.out.println("");


       // Finally Create an Enum from a String
       System.out.println( "\nCreate a Months enum from a String");
       Months aMonth = Months.valueOf( "Jan" );
       Months bMonth = Months.valueOf( "Oct");
       printStatusHeader();
       printStatus(aMonth);
       printStatus(bMonth);
       printStatus(Months.valueOf("Aug"));

       // Demonstrate what happens when we give a String that's not a month
       try {
           System.out.println( "\nwhat happens when we give a String that\'s not a month ...");
	       printStatus(Months.valueOf("ARandomStringThatsNotaMonth"));
	       }
	       catch ( java.lang.IllegalArgumentException ex ) {
	           System.out.println( "Exception Caught " + ex.toString() );
		   }
		   
		   
    }
}

/*
toString()     name() ordinal() Days
       Jan        Jan         0   31
       Feb        Feb         1   28
       Mar        Mar         2   31
       Apr        Apr         3   30
       May        May         4   31
       Jun        Jun         5   30
       Jul        Jul         6   31
       Aug        Aug         7   31
       Sep        Sep         8   30
       Oct        Oct         9   31
       Nov        Nov        10   30
       Dec        Dec        11   31
Demonstrate ways to compare to enums
   MonthA    MonthB        A==B    A.equals(B) A.compareTo(B) B.compareTo(A)
      Jan       Feb       false          false             -1              1
      Jul       Jul        true           true              0              0
      Oct       Apr       false          false              6             -6
      Mar       Nov       false          false             -8              8
      May       Aug       false          false             -3              3
Create a Months enum from a String
toString()     name() ordinal() Days
       Jan        Jan         0   31
       Oct        Oct         9   31
       Aug        Aug         7   31
what happens when we give a String thats not a month ...
Exception Caught java.lang.IllegalArgumentException: No enum constant Months.ARandomStringThatsNotaMonth
*/
