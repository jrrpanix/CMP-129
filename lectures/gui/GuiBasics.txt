/ Course       : CMP-129
// Title       : GUI Basics
// Instructor  : JReynolds


In this lecture we are going to cover the basics for creating
GUI's (Graphical User Interfaces aka UI's).

Topics:

      *) JFrame
      *) JPanel
      *) JLabel
      *) JTextField
      *) JButton
      	 -) Adding ActionListener to JButton
      *) Layout Mangers 
      	 -) GridLayout
	 -) BorderLayout
	 -) FlowLayout


(*) The First GUI

    import javax.swing.*; // swing components (JFrame)

     public class FirstGUI extends JFrame {

         public FirstGUI() {
	        int width = 200 , height = 400;
		setSize(width,height);
		setLocation(200,200);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setVisible(true);
	 }

	 public static void main( String [] args ) {
	        new FirstGUI();
	}
    }

    We are creating a GUI Class called "FirstGUI" which we are extending
    from JFrame.  JFrame is the outer most component usied in creating
    user interfaces.

    (*) we call setSize(width,height)
    (*) setLocation(x,y) - the defualt location is 0,0 (top left corner)
    (*) we make the application exit when the window closes
    (*) we make it appear - setVisible(true)


(*) Adding Some Components to the GUI

    import javax.swing.*; // swing components (JFrame)

     public class FirstGUI extends JFrame {

         public FirstGUI() {
	 	init();
		addStuff();
		setVisible(true);
	 }

	 private void addStuff() {
	 	 JPanel aPanel = new JPanel();
		 JLabel aLabel = new JLabel("Input:");
		 JTextField text = new JTextField(12);
		 aPanel.add(aLabel)'
		 aPanel.add(text);
		 add(aPanel);
	 }

	 private void init() {
	        int width = 200 , height = 400;
		setSize(width,height);
		setLocation(200,200);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	 }

	 public static void main( String [] args ) {
	        new FirstGUI();
	}
    }


    we now add components to the GUI , in this example we are going to 
    add a JLabel and an input text field , JTextField.

    we are going to put the components into a JPanel, which has a 
    default layout manager as FlowLayout.

    if we don't add the panel then there will be no layout and the GUI will
    look strange

    we add the components JLabel and JTextField to JPanel

    we then add the Panel to JFrame


(*) GridLayout Manager
        
    the GridLayout puts components into a row column format where 
    you specify the number of rows and columns of the grid when its
    created.

    Layout Managers are part of awt

    import java.awt.*;       // to access grid managers
    import javax.swing.*;    // to access components
    import java.awt.event.*; // to access ActionListener

    public class GridExample extends JFrame {
    	   private JButton [] buttons_;
	   private int rows_;
	   private int cols_;

    	   public GridExample( int rows, int cols ) {
	   	  rows_=rows;
		  cols_=cols;
		  buildGrid();
		  init();
		  setVisible(true);
	   }

	   private void buildGrid() {
	   	   JPanel aPanel = new JPanel();
	   	   GridLayout grid = new GridLayout( rows_ , cols_);
		   aPanel.setLayoutManager(grid);
	      	   buttons_ = new JButton[rows_*cols_];
		   ActionListener listener = new ButtonA();
	   	   for( int i = 0; i < buttons_.length ; i++ ) {
		   	String buttonLabel = Integer.toString(i+1); 
		   	buttons_[i] = new JButton(buttonLabel);
			buttons_[i].addActionListener(listener);
			aPanel.add(buttons_[i]);
		   }
		   add(aPanel);
	   }

	   private void init() {
	   	   int width = cols_ * 50;
		   int height = rows_ * 50;
	   	   setSize(width,height);
		   setLocation( 100,100);
		   setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	   }

	   class ButtonA implements ActionListener {

	   	 public void actionPerformed( ActionEvent e ) {
		    String cmd = e.getActionCommand();
		    System.out.println( "you pressed button " + cmd );
		 }
	   }
	   
	   public static void main( String [] args ) {
	      new GridExample( 10,5 );
	   }

    }


(*) BorderLayout Manager
        
    BorderLayout creates 5 Areas on a Panel.  These areas are reffrred to as NORTH,SOUTH
    EAST,WEST and CENTER.


    Each region takes 1 Component Object ( so if multiple components are needed in a region
    then a JPanel should be created , compoents added to the panel and the panel set to
    the region.


    import java.awt.*;       // to access grid managers
    import javax.swing.*;    // to access components
    import java.awt.event.*; // to access ActionListener

    public class BorderExample extends JFrame {
    	   private JButton [] buttons_;

    	   public BorderExample() {
		  buildLayout();
		  init();
		  setVisible(true);
	   }

	   private void buildLayout() {
	   	   JPanel aPanel = new JPanel();
	   	   BorderLaout border = new BorderLayout();
		   aPanel.setLayoutManager(border);
		   int nButtons = 5;
	      	   buttons_ = new JButton[nButtons];
		   ActionListener listener = new ButtonA();
	   	   for( int i = 0; i < buttons_.length ; i++ ) {
		   	String buttonLabel = Integer.toString(i+1); 
		   	buttons_[i] = new JButton(buttonLabel);
			buttons_[i].addActionListener(listener);
		   }

		   aPanel.add(buttons[0], BorderLayout.NORTH);
		   aPanel.add(buttons[1], BorderLayout.SOUTH);
		   aPanel.add(buttons[2], BorderLayout.EAST);
		   aPanel.add(buttons[3], BorderLayout.WEST);
		   aPanel.add(buttons[4], BorderLayout.CENTER);
		   add(aPanel);
	   }

	   private void init() {
	   	   int width = 400, height = 400;
	   	   setSize(width,height);
		   setLocation( 100,100);
		   setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	   }

	   class ButtonA implements ActionListener {

	   	 public void actionPerformed( ActionEvent e ) {
		    String cmd = e.getActionCommand();
		    System.out.println( "you pressed button " + cmd );
		 }
	   }
	   
	   public static void main( String [] args ) {
	      new BorderExample();
	   }

    }




    





