/ Course       : CMP-129
// Title       : MenuBar and FileChooser
// Instructor  : JReynolds


Most GUI applications have a menu bar at the top that allows
the user of the applcation to view files and open them.
In the lecture we will go over creating a menu bar and 
using it to invoke a FileChooser so we can browse files and then
load them.

In the lecture we will cover the following concepts:

   *) JMenuBar , JMenu , JMenuItem
   *) JFileChooser
   *) JTextArea
   *) JScrollPane

   in addition we will also cover reading in a file using

   *) FileInputStream with DataInputStream


1) Creating the Menu Structure

When creating a menu that goes across the top of an application the
sequence is 
	 
	 a) Create the MenuBar 
	 b) Create a Menu or Menus  which then appears as the Categories across the top
	 (a typical menubar will have as menu categories : File  Edit Options ... etc )
	 c) Create MenuItems under each menu category
	 (for example under the File Menu Heading there will typicall be things like
	 Open , Save , SaveAs ... etc.
	 d) Add an ActionListener implementation for each MenuItem that's selected ...

     public class MenuExample extends JFrame {

        import javax.swing.*;
	import java.awt.*;
	import java.awt.event.*;
         
         public MenuExample() {
	    createMenuStructure();
	    setSize(500,500);
	    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    setVisible(true);
	 }

	 private void createMenuStrcuture() {

	    // the bar the goes across the top
	    JMenubar menuBar = new JMenuBar() ;

	    // now create categories ...
	    JMenu fileMenu = new JMenu("File");

	    // create selection items under the category
	    JMenuItem openItem = new JMenuItem("Open");
	    JMenuItem saveItem = new JMenuItem("Save");

	    // add to items to the menu 
	    fileMenu.add(openItem);
	    fileMenu.addSeparator(); // put a horizontal line between the items
	    fileMenu.add(saveItem);

	    // add action listeners for when the menu items are chosen
	    openItem.addActionListener( new MenuActionL());
	    saveItem.addActionListener( new MenuActionL());

	    // set the menu bar in the frame
            setJMenuBar(menuBar);
	 } 


	 private class MenuActionL implements ActionListener {

	    	public void actionPerformed(ActionEvent e ) {
		   String cmd = e.getActionCommand();
		   if ( cmd.equals("Open")){
		       openCmd();
	           } else if ( cmd.equals("Save")) {
		       saveCmd();
	           }
               }

	       private void openCmd() {
	       	    System.out.println(" in openCmd()") ;
	       }
	
	       private void saveCmd() {
	            System.out.println(" in saveCmd()") ;
	       }
	
       }
     }



2) Adding a JFileChooser 

   Now that we created a MenuBar in a JFrame the next thing to do
   is a have a FileChooser pop up when the File->Open or File->Save 
   is selected.


   a) we will add to the class MenuExample JFileChooser
   b) then we will add an ActionLister call back when
      a file is selected
   c) we will also go back and modify the code so that
      a file chooser pops up when the menu item is selected 
   d) we will load the selected file ...


   public class MenuExample extends JFrame {

         JFileChooser chooser;
   
         public MenuExample() {
	    createMenuStructure();
	    createChooser();
	    setSize(500,500);
	    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    setVisible(true);
	 }


	 private void createChooser() {
	    	chooser = new JFileChooser();
		chooser.addActionListener(new FileL());
	 }


         class FileL implements ActionListener {
	      public void actionPerformed(ActionEvent e ) {
	       String cmd = e.getActionCommand();
	       if (cmd.equals("ApproveSelection")) {
		System.out.println("You selected " + chooser.getSelectedFile());
		loadFile();  <--- we need to implement this 
	      }
	}

	 private class MenuActionL implements ActionListener {

	    	public void actionPerformed(ActionEvent e ) {
		   String cmd = e.getActionCommand();
		   if ( cmd.equals("Open")){
		       openCmd();
	           } else if ( cmd.equals("Save")) {
		       saveCmd();
	           }
               }

	       private void openCmd() {
	       	    System.out.println(" in openCmd()") ;
		    // ADD COMMAND HERE to call File Chooser PopUP
                    showChooser();
	       }
	
	       private void saveCmd() {
	            System.out.println(" in saveCmd()") ;
	       }
	
         }

       private void showChooser() {
	  chooser.showOpenDialog(getParent());
       }

      }

3) Loading the selected file and putting the text into a JTextArea

    (A) create a place to diaplay contents of file ...

     public class MenuExample  extends JFrame {

    JFileChooser  chooser;
    JTextArea     text; // <- add this as an instance varaible 

    (B)  add code to create the text area ... and make it 
         scrollable ...

        private void initViewArea() {
	  JPanel panel = new JPanel();
	  text = new JTextArea("",25,65);
	  text.setLineWrap(true);
	  JScrollPane scroll = new JScrollPane(text);
	  scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
	  panel.add(scroll);
	  add(panel);
        }


    (C)  Add code to load the file in 
    private void loadFile() {
	try {
	    File f = chooser.getSelectedFile();
	    FileInputStream fs = new FileInputStream(f);
	    DataInputStream ds = new DataInputStream(fs);
	    String contents = new String();
	    while( ds.available() > 0 ) {
		int n = ds.available();
		System.out.println(n + " bytes avail");
		byte [] buffer = new byte[n];
		ds.read(buffer);
		contents += new String(buffer);
	    }
	    text.setText(contents);
	    ds.close();
	} catch (IOException e) {
	    
	}
    }



4) the complete code will look like this ...

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;

public class MenuExample  extends JFrame {

    JFileChooser  chooser;
    JTextArea     text;
    
    public MenuExample() {
	init();
	initMenu();
	initViewArea();
	setVisible(true);
    }
    
    private void initViewArea() {
	JPanel panel = new JPanel();
	text = new JTextArea("",25,65);
	
	text.setLineWrap(true);
	JScrollPane scroll = new JScrollPane(text);
	scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
	panel.add(scroll);
	add(panel);
    }
    
    private void initMenu() {
	JMenuBar menuBar = new JMenuBar();
	JMenu fileMenu = new JMenu( "File");
	JMenuItem openItem = new JMenuItem("Open");
	openItem.addActionListener( new MenuActionL());
	fileMenu.add(openItem);
	
	fileMenu.addSeparator();
	
	JMenuItem saveItem = new JMenuItem("Save");
	saveItem.addActionListener(new MenuActionL());
	fileMenu.add(saveItem);
	
	menuBar.add(fileMenu);
	setJMenuBar(menuBar);
	chooser = new JFileChooser();
	chooser.addActionListener(new FileL());
    }
    
    private void loadFile() {
	try {
	    File f = chooser.getSelectedFile();
	    FileInputStream fs = new FileInputStream(f);
	    DataInputStream ds = new DataInputStream(fs);
	    String contents = new String();
	    while( ds.available() > 0 ) {
		int n = ds.available();
		System.out.println(n + " bytes avail");
		byte [] buffer = new byte[n];
		ds.read(buffer);
		contents += new String(buffer);
	    }
	    text.setText(contents);
	    ds.close();
	} catch (IOException e) {
	    
	}
    }
    
    class FileL implements ActionListener {
	public void actionPerformed(ActionEvent e ) {
	    String cmd = e.getActionCommand();
	    if (cmd.equals("ApproveSelection")) {
		System.out.println("You selected " + chooser.getSelectedFile());
		loadFile();
	    }
	    
	}
    }
    
    class MenuActionL implements ActionListener {
	
	public void actionPerformed(ActionEvent e ) {
	    String cmd = e.getActionCommand();
	    if ( cmd.equals("Open")){
		openCmd();
	    } else if ( cmd.equals("Save")) {
		saveCmd();
	    }
	}
	
	private void openCmd() {
	    System.out.println(" in openCmd()") ;
	    getListing();
	}
	
	private void saveCmd() {
	    System.out.println(" in saveCmd()") ;
	}
	
    }
    
    private void getListing() {
	chooser.showOpenDialog(getParent());
    }
    
    private void init() {
	setSize(800,500);
	setLocation(1600,300);
	setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }
    
    static public void main( String [] args ){
	new MenuExample();
    }
    
}

